cmake_minimum_required(VERSION 2.8.12)
project(tgui5 CXX)

option(SHARED "Build as a shared library" OFF)
option(DEBUG "Build for debugging" OFF)
option(RASPBERRYPI "Build for Raspberry Pi" OFF)
option(RASPBERRYPI_NORMAL "Build for Raspberry Pi (standard)" OFF)
option(MAS "Build for Mac App Store" off)

set(USER_INCLUDE_PATH "" CACHE FILEPATH "Any extra include directories you want")
set(USER_LIBRARY_PATH "" CACHE FILEPATH "Any extra library directories you want")

include_directories("include")
include_directories(${USER_INCLUDE_PATH})
link_directories(${USER_LIBRARY_PATH})

set(SRC
	src/tgui5.cpp
	src/tgui5_sdl.cpp
)

if(WIN32 AND SHARED)
	LIST(APPEND SRC versioninfo.rc)
endif()

set(TGUI5_LIB tgui5)
if(SHARED)
	add_library(${TGUI5_LIB} SHARED ${SRC})
else()
	add_library(${TGUI5_LIB} STATIC ${SRC})
endif()

if(MINGW)
	add_compile_options(-DTGUI5_LIB_BUILD)
	if(STEAMWORKS)
		add_compile_options(-DSTEAMWORKS)
	endif()
	if(NOT SHARED)
		add_compile_options(-DTGUI5_STATIC)
	endif()
	if(DEBUG)
		add_compile_options(-DDEBUG -g -fsanitize=address -fsanitize=leak)
	endif()
elseif(WIN32)
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS")
	SET(FLAGS "/D_CRT_SECURE_NO_WARNINGS /D_USE_MATH_DEFINES /EHsc /MP /W3 /wd4244 /wd4800 /wd4101 /MT /DTGUI5_LIB_BUILD /Gy")
	SET(FLAGS "${FLAGS} /DNTDDI_VERSION=0x06010000 /D_WIN32_WINNT=0x601")
	if(NOT SHARED)
		add_compile_options(/DTGUI5_STATIC)
	endif()
	if(DEBUG)
		add_compile_options(/DDEBUG)
	endif()
	set_target_properties(${TGUI5_LIB} PROPERTIES COMPILE_FLAGS "${FLAGS}")
else()
	if(NOT MAS)
		add_compile_options(-DTGUI5_LIB_BUILD -DTGUI5_STATIC -DNOOSKEWL_SHIM_STATIC -DNOOSKEWL_WEDGE_STATIC)
	endif()
	add_compile_options(-Wall)
	if(DEBUG)
		add_compile_options(-g -DDEBUG -fsanitize=address -fsanitize=leak)
	endif()
	if(IOS)
		add_compile_options(-stdlib=libc++ -std=c++11)
		add_compile_options(-DIOS)
		SET_TARGET_PROPERTIES(${TGUI5_LIB} PROPERTIES COMPILE_FLAGS "${FLAGS}")
		set_xcode_property(${TGUI5_LIB} IPHONEOS_DEPLOYMENT_TARGET "8.0")
	elseif(APPLE)
		if(MAS)
			add_compile_options(-DMAS)
		endif()
		add_compile_options(-stdlib=libc++ -std=c++11)
		add_compile_options(-O2 -fvisibility=hidden -fno-objc-arc)
		SET_TARGET_PROPERTIES(${TGUI5_LIB} PROPERTIES COMPILE_FLAGS "${FLAGS}")
		set_target_properties(${TGUI5_LIB} PROPERTIES MACOSX_RPATH on)
		set_target_properties(${TGUI5_LIB} PROPERTIES BUILD_WITH_INSTALL_RPATH on)
	else()
		add_compile_options(-fvisibility=hidden -Wno-psabi -std=c++0x)
		if (RASPBERRYPI)
			add_compile_options(-DRASPBERRYPI=1)
			add_compile_options(-DRASPBERRYPI=1)
		endif()
		if (RASPBERRYPI_NORMAL)
			add_compile_options(-DRASPBERRYPI_NORMAL=1)
			add_compile_options(-DRASPBERRYPI_NORMAL=1)
		endif()
		if (NOT DEBUG AND (RASPBERRYPI OR RASPBERRYPI_NORMAL))
			set(CMAKE_C_FLAGS_RELEASE "-Os")
			set(CMAKE_CXX_FLAGS_RELEASE "-Os")
		endif()
		if (NOT RASPBERRYPI AND NOT RASPBERRYPI_NORMAL)
			set(CMAKE_C_FLAGS_RELEASE "-O2")
			set(CMAKE_CXX_FLAGS_RELEASE "-O2")
		endif()
		IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND SHARED)
			add_compile_options(-fPIC)
		ENDIF()
		SET_TARGET_PROPERTIES(${TGUI5_LIB} PROPERTIES COMPILE_FLAGS "${FLAGS}")
	endif()
endif()
