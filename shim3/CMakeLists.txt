cmake_minimum_required(VERSION 2.8.12)
project(shim3)

option(SHARED "Build as a shared library" OFF)
option(USE_STATIC_LIBS "Link with static libraries" ON)
option(DEBUG "Build for debugging" OFF)
option(RASPBERRYPI "Build for Raspberry Pi" OFF)
option(RASPBERRYPI_NORMAL "Build for Raspberry Pi (normal code paths of Linux)" OFF)
option(WANT_EXAMPLES "Build the examples" OFF)
option(WANT_TOOLS "Build the tools" OFF)
option(USE_D3DX "Use D3DX to compiler shaders online" OFF)
option(WANT_TTF "Build with TTF support" OFF)
option(WANT_XML "Build with XML support" OFF)
option(WANT_ALLEGRO_TOOLS "Need Allegro to build these tools" OFF)
option(USE_BASS "Use BASS (needed for OGG/Vorbis)" OFF)
option(USE_VORBIS "Use libogg/libvorbis (needed for OGG/Vorbis)" OFF)
option(USE_VORBISFILE "Use libvorbisfile on top of libogg/libvorbis" OFF)
option(USE_FLAC "Use FLAC for samples" ON)
option(STEAMWORKS "Build for Steam" off)
option(MAS "Build for Mac App Store" off)

set(USER_INCLUDE_PATH "" CACHE FILEPATH "Any extra include directories you want")
set(USER_LIBRARY_PATH "" CACHE FILEPATH "Any extra library directories you want")

include_directories("include")
include_directories(${USER_INCLUDE_PATH})
link_directories(${USER_LIBRARY_PATH})

set(LIB_SRC
	src/a_star.cpp
	src/achievements.cpp
	src/audio.cpp
	src/cd.cpp
	src/cloud.cpp
	src/cpa.cpp
	src/crash.cpp
	src/devsettings.cpp
	src/font.cpp
	src/shim.cpp
	src/error.cpp
	src/flac.cpp
	src/gfx.cpp
	src/gui.cpp
	src/image.cpp
	src/input.cpp
	src/interp.cpp
	src/json.cpp
	src/md5.cpp
	src/mml.cpp
	src/model.cpp
	src/mt19937ar.cpp
	src/pixel_font.cpp
	src/primitives.cpp
	src/sample.cpp
	src/shader.cpp
	src/sound.cpp
	src/sprite.cpp
	src/tilemap.cpp
	src/tokenizer.cpp
	src/translation.cpp
	src/utf8.cpp
	src/util.cpp
	src/vertex_cache.cpp
	src/vorbis.cpp
	src/widgets.cpp
)

if(STEAMWORKS)
	LIST(APPEND LIB_SRC src/steamworks.cpp)
endif()

if(WANT_TTF)
	LIST(APPEND LIB_SRC src/ttf.cpp)
endif()
if(WANT_XML)
	LIST(APPEND LIB_SRC src/xml.cpp)
endif()

if(APPLE AND NOT IOS)
	list(APPEND LIB_SRC src/apple.M src/macosx.M)
elseif(WIN32 AND SHARED)
	list(APPEND LIB_SRC versioninfo.rc)
elseif(UNIX AND NOT RASPBERRYPI)
	list(APPEND LIB_SRC src/x.cpp)
endif()

if(MAS)
	list(APPEND LIB_SRC src/gamecenter.M)
endif()

if(NOT IOS AND WANT_TTF)
	list(APPEND LIB_SRC external/SDL2_ttf-2.0.14/SDL_ttf.c)
	include_directories(external/SDL2_ttf-2.0.14)
endif()

set(SHIM_LIB shim3)
if(SHARED)
	add_library(${SHIM_LIB} SHARED ${LIB_SRC})
else()
	add_library(${SHIM_LIB} STATIC ${LIB_SRC})
endif()

if(WANT_EXAMPLES)
	add_executable(example examples/example.cpp)
endif()

if(WANT_TOOLS)
	add_executable(change_colour misc/utils/change_colour.cpp)
	add_executable(compress_dir misc/utils/compress_dir.cpp)
	add_executable(convert_model misc/utils/convert_model.cpp)
	add_executable(convert_tilemap misc/utils/convert_tilemap.cpp)
	add_executable(play_mml misc/utils/play_mml.cpp)
	add_executable(prune_sprite_json misc/utils/prune_sprite_json.cpp)
	add_executable(randtile misc/utils/randtile.cpp)
	add_executable(savetool misc/utils/savetool.c)
	add_executable(translate misc/utils/translate.cpp)
	add_executable(zpipe external/zpipe/zpipe.c)
	if(WIN32)
		add_executable(pack_shader misc/utils/pack_shader.cpp)
	endif()
endif()

if(WANT_ALLEGRO_TOOLS)
	add_executable(mkpixelfont misc/utils/mkpixelfont.cpp)
endif()

if(USE_STATIC_LIBS)
	set(TGUI5_LIB tgui5_static)
else()
	set(TGUI5_LIB tgui5)
endif()

if(MINGW)
	if(USE_STATIC_LIBS)
		add_compile_options(-DTGUI5_STATIC)
	endif()
	if(USE_D3DX)
		add_compile_options(-DUSE_D3DX)
	endif()
	if(WANT_TTF)
		add_compile_options(-DUSE_TTF)
	endif()
	if(WANT_XML)
		add_compile_options(-DUSE_XML)
	endif()
	if(USE_BASS)
		add_compile_options(-DUSE_BASS)
	endif()
	if(USE_VORBIS)
		add_compile_options(-DUSE_VORBIS)
	endif()
	if(USE_VORBISFILE)
		add_compile_options(-DUSE_VORBISFILE)
	endif()
	if(USE_FLAC)
		add_compile_options(-DUSE_FLAC)
	endif()
	if(STEAMWORKS)
		add_compile_options(-DSTEAMWORKS)
	endif()
	if(SHARED)
		set(LIBS ${TGUI5_LIB} SDL2 d3d9 winmm dbghelp)
		if(USE_D3DX)
			set(LIBS ${LIBS} d3dx9)
		endif()
		if(WANT_TTF)
			LIST(APPEND LIBS freetype zlibstatic)
		else()
			LIST(APPEND LIBS zlibstatic)
		endif()
		if(USE_VORBISFILE)
			LIST(APPEND LIBS libvorbisfile_static libvorbis_static libogg_static)
		elseif(USE_VORBIS)
			LIST(APPEND LIBS libvorbis_static libogg_static)
		elseif(USE_FLAC)
			LIST(APPEND LIBS libogg_static libFLAC_static)
		endif()
		set(PROGRAM_LIBS ${LIBS})
	else()
		add_compile_options(-DSHIM3_STATIC)
		set(PROGRAM_LIBS ${TGUI5_LIB} SDL2 d3d9 winmm dbghelp)
		if(USE_D3DX)
			set(PROGRAM_LIBS ${PROGRAM_LIBS} d3dx9)
		endif()
		if(WANT_TTF)
			LIST(APPEND PROGRAM_LIBS freetype zlibstatic)
		else()
			LIST(APPEND PROGRAM_LIBS zlibstatic)
		endif()
		if(USE_VORBISFILE)
			LIST(APPEND PROGRAM_LIBS libvorbisfile_static libvorbis_static libogg_static)
		elseif(USE_VORBIS)
			LIST(APPEND PROGRAM_LIBS libvorbis_static libogg_static)
		elseif(USE_FLAC)
			LIST(APPEND PROGRAM_LIBS libogg_static libFLAC_static)
		endif()
	endif()
	if(DEBUG)
		add_compile_options(-DDEBUG -g -fsanitize=address -fsanitize=leak)
	endif()
	target_link_libraries(${SHIM_LIB} ${LIBS})
	target_compile_options(${SHIM_LIB} PRIVATE "-DSHIM3_BUILD")
	if(WANT_EXAMPLES)
		set(EXAMPLE_LIBS ${SHIM_LIB} ${PROGRAM_LIBS} SDL2main)
		target_link_libraries(example ${EXAMPLE_LIBS})
	endif()
	if(WANT_TOOLS)
		set(TOOL_LIBS ${SHIM_LIB} ${PROGRAM_LIBS} SDL2main)
		target_link_libraries(change_colour ${TOOL_LIBS})
		target_link_libraries(compress_dir ${TOOL_LIBS})
		target_link_libraries(convert_model ${TOOL_LIBS})
		target_link_libraries(convert_tilemap ${TOOL_LIBS})
		target_link_libraries(play_mml ${TOOL_LIBS})
		target_link_libraries(prune_sprite_json ${TOOL_LIBS})
		target_link_libraries(randtile ${TOOL_LIBS})
		target_link_libraries(savetool zlibstatic)
		target_link_libraries(zpipe zlibstatic)
		if(WIN32)
			target_link_libraries(pack_shader ${TOOL_LIBS})
		endif()
	endif()
	if(WANT_ALLEGRO_TOOLS)
		set(ALLEGRO_LIBS "allegro_monolith-static" "freetype" "zlibstatic" "opengl32" "dxguid" "dinput8" "xinput" "dsound" "d3d9" "kernel32" "user32" "gdi32" "comdlg32" "ole32" "winmm" "psapi" "gdiplus" "uuid" "shlwapi" "dbghelp")
		target_link_libraries(mkpixelfont ${ALLEGRO_LIBS})
	endif()
elseif(WIN32)
	if(SHARED)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS")
	else()
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:CONSOLE")
	endif()
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /ignore:4099")
	SET(FLAGS "/D_CRT_SECURE_NO_WARNINGS /D_USE_MATH_DEFINES /EHsc /MP /W3 /wd4244 /wd4800 /wd4091 /wd4101 /MT /Gy")
	SET(FLAGS "${FLAGS} /DNTDDI_VERSION=0x06010000 /D_WIN32_WINNT=0x601")
	if(USE_STATIC_LIBS)
		add_compile_options(/DTGUI5_STATIC)
	endif()
	if(USE_D3DX)
		add_compile_options(/DUSE_D3DX)
	endif()
	if(WANT_TTF)
		add_compile_options(/DUSE_TTF)
	endif()
	if(WANT_XML)
		add_compile_options(/DUSE_XML)
	endif()
	if(USE_BASS)
		add_compile_options(/DUSE_BASS)
	endif()
	if(USE_VORBIS)
		add_compile_options(/DUSE_VORBIS)
	endif()
	if(USE_VORBISFILE)
		add_compile_options(/DUSE_VORBISFILE)
	endif()
	if(USE_FLAC)
		add_compile_options(/DUSE_FLAC)
	endif()
	if(STEAMWORKS)
		add_compile_options(/DSTEAMWORKS)
	endif()
	if(SHARED)
		set(LIBS ${TGUI5_LIB} SDL2 d3d9 winmm dbghelp)
		if(USE_D3DX)
			set(LIBS ${LIBS} d3dx9)
		endif()
		if(WANT_TTF)
			LIST(APPEND LIBS freetype zlibstatic)
		else()
			LIST(APPEND LIBS zlibstatic)
		endif()
		if(USE_VORBISFILE)
			LIST(APPEND LIBS libvorbisfile_static libvorbis_static libogg_static)
		elseif(USE_VORBIS)
			LIST(APPEND LIBS libvorbis_static libogg_static)
		elseif(USE_FLAC)
			LIST(APPEND LIBS libogg_static libFLAC_static)
		endif()
		set(PROGRAM_LIBS ${LIBS})
	else()
		add_compile_options(/DSHIM3_STATIC)
		set(PROGRAM_LIBS ${TGUI5_LIB} SDL2 d3d9 winmm dbghelp)
		if(USE_D3DX)
			set(PROGRAM_LIBS ${PROGRAM_LIBS} d3dx9)
		endif()
		if(WANT_TTF)
			LIST(APPEND PROGRAM_LIBS freetype zlibstatic)
		else()
			LIST(APPEND PROGRAM_LIBS zlibstatic)
		endif()
		if(USE_VORBISFILE)
			LIST(APPEND PROGRAM_LIBS libvorbisfile_static libvorbis_static libogg_static)
		elseif(USE_VORBIS)
			LIST(APPEND PROGRAM_LIBS libvorbis_static libogg_static)
		elseif(USE_FLAC)
			LIST(APPEND PROGRAM_LIBS libogg_static libFLAC_static)
		endif()
	endif()
	if(DEBUG)
		add_compile_options(/DDEBUG)
	endif()
	target_link_libraries(${SHIM_LIB} ${LIBS})
	set_target_properties(${SHIM_LIB} PROPERTIES COMPILE_FLAGS "/DSHIM3_BUILD ${FLAGS}")
	if(WANT_EXAMPLES)
		set(EXAMPLE_LIBS ${SHIM_LIB} ${PROGRAM_LIBS} SDL2main)
		set_target_properties(example PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(example ${EXAMPLE_LIBS})
	endif()
	if(WANT_TOOLS)
		set(TOOL_LIBS ${SHIM_LIB} ${PROGRAM_LIBS} SDL2main)
		set_target_properties(change_colour PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(change_colour ${TOOL_LIBS})
		set_target_properties(compress_dir PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(compress_dir ${TOOL_LIBS})
		set_target_properties(convert_model PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(convert_model ${TOOL_LIBS})
		set_target_properties(convert_tilemap PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(convert_tilemap ${TOOL_LIBS})
		set_target_properties(play_mml PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(play_mml ${TOOL_LIBS})
		set_target_properties(prune_sprite_json PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(prune_sprite_json ${TOOL_LIBS})
		set_target_properties(randtile PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(randtile ${TOOL_LIBS})
		set_target_properties(savetool PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(savetool zlibstatic)
		target_link_libraries(zpipe zlibstatic)
		if(WIN32)
			set_target_properties(pack_shader PROPERTIES COMPILE_FLAGS "${FLAGS}")
			target_link_libraries(pack_shader ${TOOL_LIBS})
		endif()
	endif()
	if(WANT_ALLEGRO_TOOLS)
		set(ALLEGRO_LIBS "allegro_monolith-static" "freetype" "zlibstatic" "opengl32" "dxguid" "dinput8" "xinput" "dsound" "d3d9" "kernel32" "user32" "gdi32" "comdlg32" "ole32" "winmm" "psapi" "gdiplus" "uuid" "shlwapi" "dbghelp")
		set_target_properties(mkpixelfont PROPERTIES COMPILE_FLAGS "${FLAGS}")
		target_link_libraries(mkpixelfont ${ALLEGRO_LIBS})
	endif()
else()
	if(NOT MAS)
		add_compile_options(-DSHIM3_BUILD -DTGUI5_STATIC -DSHIM3_STATIC)
	endif()
	add_compile_options(-Wall)
	if(DEBUG)
		add_compile_options(-g -fsanitize=address -fsanitize=leak -DDEBUG)
	endif()
	if(WANT_TTF)
		add_compile_options(-DUSE_TTF)
	endif()
	if(WANT_XML)
		add_compile_options(-DUSE_XML)
	endif()
	if(USE_BASS)
		add_compile_options(-DUSE_BASS)
	endif()
	if(USE_VORBIS)
		add_compile_options(-DUSE_VORBIS)
	endif()
	if(USE_VORBISFILE)
		add_compile_options(-DUSE_VORBISFILE)
	endif()
	if(USE_FLAC)
		add_compile_options(-DUSE_FLAC)
	endif()
	if(STEAMWORKS)
		add_compile_options(-DSTEAMWORKS)
	endif()
	if(MAS)
		add_compile_options(-DMAS)
	endif()
	if(IOS)
		add_compile_options(-stdlib=libc++ -std=c++11)
		add_compile_options(-DIOS)
		SET_TARGET_PROPERTIES(${SHIM_LIB} PROPERTIES COMPILE_FLAGS "${FLAGS}")
		set_xcode_property(${SHIM_LIB} IPHONEOS_DEPLOYMENT_TARGET "8.0")
	elseif(APPLE)
		add_compile_options(-stdlib=libc++ -std=c++11)
		add_compile_options(-Wno-extern-c-compat -Wno-c++11-narrowing)
		add_compile_options(-O2 -fvisibility=hidden -fno-objc-arc)
		set(FRAMEWORKS "${FRAMEWORKS} -framework Cocoa -framework CoreAudio -framework AudioToolbox -framework CoreVideo -framework ForceFeedback -framework IOKit -framework Carbon -framework GameKit")
		if(SHARED)
			set(LIBS ${TGUI5_LIB} SDL2 z)
			if(WANT_TTF)
				LIST(APPEND LIBS freetype zlibstatic)
			else()
				LIST(APPEND LIBS zlibstatic)
			endif()
			if(USE_VORBISFILE)
				LIST(APPEND LIBS vorbisfile vorbis ogg)
			elseif(USE_VORBIS)
				LIST(APPEND LIBS vorbis ogg)
			elseif(USE_FLAC)
				LIST(APPEND LIBS FLAC)
			endif()
			set(PROGRAM_LIBS ${LIBS})
		else()
			set(PROGRAM_LIBS SDL2 z)
			if(WANT_TTF)
				LIST(APPEND PROGRAM_LIBS freetype zlibstatic)
			else()
				LIST(APPEND PROGRAM_LIBS zlibstatic)
			endif()
			if(USE_VORBISFILE)
				LIST(APPEND PROGRAM_LIBS vorbisfile vorbis ogg)
			elseif(USE_VORBIS)
				LIST(APPEND PROGRAM_LIBS vorbis ogg)
			elseif(USE_FLAC)
				LIST(APPEND PROGRAM_LIBS FLAC)
			endif()
		endif()
		SET_TARGET_PROPERTIES(${SHIM_LIB} PROPERTIES COMPILE_FLAGS "${FLAGS}")
		if(SHARED)
			set_target_properties(${SHIM_LIB} PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
			set_target_properties(${SHIM_LIB} PROPERTIES MACOSX_RPATH on)
			set_target_properties(${SHIM_LIB} PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			target_link_libraries(${SHIM_LIB} ${PROGRAM_LIBS})
		endif()
		if(WANT_EXAMPLES)
			if(NOT SHARED)
				set(EXAMPLE_LIBS ${PROGRAM_LIBS})
				set_target_properties(example PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
			endif()
			LIST(APPEND EXAMPLE_LIBS ${SHIM_LIB})
			SET_TARGET_PROPERTIES(example PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(example PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(example PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(example ${EXAMPLE_LIBS})
		endif()
		if(WANT_TOOLS)
			if(NOT SHARED)
				set(TOOL_LIBS ${PROGRAM_LIBS})
				set_target_properties(change_colour PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
				set_target_properties(compress_dir PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
				set_target_properties(convert_model PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
				set_target_properties(convert_tilemap PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
				set_target_properties(play_mml PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
				set_target_properties(prune_sprite_json PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
				set_target_properties(randtile PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
				set_target_properties(savetool PROPERTIES LINK_FLAGS "${FRAMEWORKS}")
			endif()
			LIST(APPEND TOOL_LIBS ${SHIM_LIB})
			SET_TARGET_PROPERTIES(change_colour PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(change_colour PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(change_colour PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(change_colour ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(compress_dir PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(compress_dir PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(compress_dir PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(compress_dir ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(convert_model PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(convert_model PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(convert_model PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(convert_model ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(convert_tilemap PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(convert_tilemap PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(convert_tilemap PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(convert_tilemap ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(play_mml PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(play_mml PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(play_mml PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(play_mml ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(prune_sprite_json PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(prune_sprite_json PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(prune_sprite_json ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(randtile PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(randtile PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(randtile PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(randtile ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(convert_tilemap PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(convert_tilemap PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(convert_tilemap PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(convert_tilemap ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(savetool PROPERTIES COMPILE_FLAGS "${FLAGS}")
			set_target_properties(savetool PROPERTIES BUILD_WITH_INSTALL_RPATH on)
			set_target_properties(savetool PROPERTIES INSTALL_RPATH "@executable_path/")
			target_link_libraries(savetool ${TOOL_LIBS})
			target_link_libraries(zpipe z)
		endif()
	else()
		add_compile_options(-Wno-unused-result -Wno-psabi -fvisibility=hidden -Wno-strict-aliasing -Wno-comment -std=c++0x)
		if(STEAMWORKS)
			add_compile_options(-DSTEAMWORKS)
		endif()
		if(DEBUG)
			add_compile_options(-g -fsanitize=address -fsanitize=leak)
			set(LFLAGS "${LFLAGS} -fsanitize=address -fsanitize=leak")
		endif()
		IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND SHARED)
			add_compile_options(-fPIC)
		ENDIF()
		if (NOT DEBUG AND (RASPBERRYPI OR RASPBERRYPI_NORMAL))
			set(CMAKE_C_FLAGS_RELEASE "-Os")
			set(CMAKE_CXX_FLAGS_RELEASE "-Os")
		endif()
		if (NOT RASPBERRYPI AND NOT RASPBERRYPI_NORMAL)
			set(CMAKE_C_FLAGS_RELEASE "-O2")
			set(CMAKE_CXX_FLAGS_RELEASE "-O2")
		endif()
		if (RASPBERRYPI)
			add_compile_options(-DRASPBERRYPI=1)
			add_compile_options(-DRASPBERRYPI=1)
		endif()
		if (RASPBERRYPI_NORMAL)
			add_compile_options(-DRASPBERRYPI_NORMAL=1)
			add_compile_options(-DRASPBERRYPI_NORMAL=1)
		endif()
		if(RASPBERRYPI)
			set(LIBS ${TGUI5_LIB} /usr/local/lib/libSDL2.so)
			if(WANT_TTF)
				LIST(APPEND LIBS freetype z)
			else()
				LIST(APPEND LIBS z)
			endif()
			set(PROGRAM_LIBS ${LIBS})
			include_directories("/opt/vc/include")
		else()
			if(SHARED)
				set(LIBS ${TGUI5_LIB} SDL2 Xcursor X11 z)
				if(WANT_TTF)
					LIST(APPEND LIBS freetype z)
				else()
					LIST(APPEND LIBS z)
				endif()
				if(USE_VORBISFILE)
					LIST(APPEND LIBS vorbisfile vorbis ogg)
				elseif(USE_VORBIS)
					LIST(APPEND LIBS vorbis ogg)
				elseif(USE_FLAC)
					LIST(APPEND LIBS FLAC)
				endif()
				set(PROGRAM_LIBS ${LIBS})
			else()
				set(PROGRAM_LIBS ${TGUI5_LIB} SDL2 Xcursor X11 z)
				if(WANT_TTF)
					LIST(APPEND PROGRAM_LIBS freetype z)
				else()
					LIST(APPEND PROGRAM_LIBS z)
				endif()
				if(USE_VORBISFILE)
					LIST(APPEND PROGRAM_LIBS vorbisfile vorbis ogg)
				elseif(USE_VORBIS)
					LIST(APPEND PROGRAM_LIBS vorbis ogg)
				elseif(USE_FLAC)
					LIST(APPEND PROGRAM_LIBS FLAC)
				endif()
			endif()
		endif()
		SET_TARGET_PROPERTIES(${SHIM_LIB} PROPERTIES COMPILE_FLAGS "${FLAGS}")
		if(SHARED)
			target_link_libraries(${SHIM_LIB} ${LIBS})
		endif()
		if(WANT_EXAMPLES)
			LIST(APPEND EXAMPLE_LIBS ${SHIM_LIB} SDL2main ${PROGRAM_LIBS})
			SET_TARGET_PROPERTIES(example PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(example PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(example ${EXAMPLE_LIBS})
		endif()
		if(WANT_TOOLS)
			LIST(APPEND TOOL_LIBS ${SHIM_LIB} SDL2main ${PROGRAM_LIBS})
			SET_TARGET_PROPERTIES(change_colour PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(change_colour PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(change_colour ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(compress_dir PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(compress_dir PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(compress_dir ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(convert_model PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(convert_model PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(convert_model ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(convert_tilemap PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(convert_tilemap PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(convert_tilemap ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(play_mml PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(play_mml PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(play_mml ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(prune_sprite_json PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(prune_sprite_json PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(prune_sprite_json ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(randtile PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(randtile PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(randtile ${TOOL_LIBS})
			SET_TARGET_PROPERTIES(savetool PROPERTIES COMPILE_FLAGS "${FLAGS}")
			SET_TARGET_PROPERTIES(savetool PROPERTIES LINK_FLAGS "${LFLAGS}")
			target_link_libraries(savetool ${TOOL_LIBS})
			target_link_libraries(zpipe z)
		endif()
		if(WANT_ALLEGRO_TOOLS)
			#set(ALLEGRO_LIBS allegro_monolith-static m pthread SM ICE X11 Xext Xcursor Xpm Xi Xinerama Xrandr GL GLU png z jpeg pulse-simple pulse asound openal FLAC ogg dumb vorbisfile vorbis ogg freetype z physfs gtk-x11-2.0 gdk-x11-2.0 pangocairo-1.0 atk-1.0 cairo gdk_pixbuf-2.0 gio-2.0 pangoft2-1.0 pango-1.0 gobject-2.0 glib-2.0 fontconfig freetype gthread-2.0 glib-2.0 theoradec ogg vorbisfile vorbis ogg)
			set(ALLEGRO_LIBS allegro_monolith-static m pthread SM ICE X11 Xext Xcursor Xpm Xi Xinerama Xrandr GL GLU png z freetype z)
			set_target_properties(mkpixelfont PROPERTIES COMPILE_FLAGS "${FLAGS}")
			target_link_libraries(mkpixelfont ${ALLEGRO_LIBS})
		endif()
	endif()
endif()
